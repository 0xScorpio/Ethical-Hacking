# Windows Privilege Escalation Enumeration Script
# Author: 0xscorpio

function Show-Section {
    param (
        [string]$Title,
        [ScriptBlock]$Command
    )

    Write-Host "`n########### $Title #################" -ForegroundColor Cyan
    & $Command
}

# User & Group Info
Show-Section "Current User Privileges" { whoami /priv }
Show-Section "Current User Groups" { whoami /groups }
Show-Section "List all users on the system" { net user }
Show-Section "Get global account lockout policy" { net accounts }
Show-Section "List Local Administrators on the current system" { Get-LocalGroupMember Administrators }
Show-Section "Details on current user" { net user $env:USERNAME }
Show-Section "Logged-in Users" { qwinsta }
Show-Section "Last Logins" { Get-EventLog -LogName Security -InstanceId 4624 -Newest 5 | Format-Table TimeGenerated, ReplacementStrings }

# Networking
Show-Section "Network Interfaces" { ipconfig /all }
Show-Section "Open Ports" { netstat -ano | findstr LISTENING }
Show-Section "Print IP routes" { route print }

# System Info
Show-Section "Uptime" { (Get-CimInstance Win32_OperatingSystem).LastBootUpTime }
Show-Section "System Information" { systeminfo | findstr /B /C:"Host Name" /C:"OS Name" /C:"System Type" /C:"Hotfix(s)" }
Show-Section "Stored Windows Credentials (cmdkey)" { cmdkey /list }
Show-Section "Stored Windows Credentials (vaultcmd)" { vaultcmd /list }

# History information
Show-Section "Generic History" { Get-History }
Show-Section "History Path" { (Get-PSReadlineOption).HistorySavePath }

# Sensitive files/directories/information
Show-Section "Check for Keepass DB" { Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue }
Show-Section "Sensitive Files (Password Hunting) --- SKIPPING, do it manually..." 
#{ Get-ChildItem -Path C:\ -Include ("*.config", "*.ini", "*.txt", "*.xml") -Recurse -ErrorAction SilentlyContinue | Select-String -Pattern "password|passwd|PWD|cred" }

# Registry enumeration
Show-Section "Check for 'password' keyword in registry" { reg query HKLM /f password /t REG_SZ /s   reg query HKCU /f password /t REG_SZ /s }
Show-Section "Windows Autologin Passwords" { reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon" 2>null | findstr "DefaultUserName DefaultDomainName DefaultPassword" }

# Firewall enumeration
Show-Section "Possible AV Detection" { Get-Process | Where-Object { $_.ProcessName -match 'avast|clamav|sophos|bitdefender|mcafee|kaspersky' } }
Show-Section "Windows Defender" { sc query windefend }
Show-Section "Dump firewall state" { netsh firewall show state }
Show-Section "Dump firewall config" { netsh firewall show config }
Show-Section "Firewalled Internal Ports" { netsh advfirewall firewall show rule name=all }

# Scheduled Tasks
Show-Section "Scheduled Tasks directory" { dir C:\Windows\System32\Tasks }
Show-Section "Scheduled Tasks" { schtasks /QUERY /FO LIST /V | findstr /i /c:taskname /c:"run as user" /c:"task to run" }
Show-Section "Alternative Scheduled Tasks Check" { Get-CimInstance -Namespace Root/Microsoft/Windows/TaskScheduler -ClassName MSFT_ScheduledTask | Select-Object TaskName, @{Name = 'User' ; Expression = {$_.Principal.UserId}}, @{Name = 'Action' ; Expression = {($_.Actions.Execute + ' ' + $_.Actions.Arguments)}} | Format-List }
Show-Section "READY - Scheduled Tasks" { Get-ScheduledTask | Where-Object {$_.State -eq 'Ready'} }

# Unquoted Service Paths
Show-Section "Unquoted Service Paths" { Get-WmiObject Win32_Service | Where-Object { $_.PathName -match ' ' -and $_.PathName -notmatch '^\"' } | ForEach-Object { $path = ($_.PathName -split ' ')[0]; $dir = Split-Path $path -Parent; if ((Get-Acl $dir).Access | Where-Object { $_.FileSystemRights -match "Write" -and $_.IdentityReference -match "$env:USERNAME" }) { $_ | Select-Object Name, DisplayName, PathName, @{Name="WritableDirectory"; Expression={$dir}} } } }

# Kernel & Exploits
Show-Section "Kernel Version" { [System.Environment]::OSVersion.Version }
#Show-Section "Search for Exploits (Manual Search Required)" { Start-Process "https://www.exploit-db.com/search?cve=$(Get-CimInstance Win32_OperatingSystem).Version" }

# Searching for SAM/SYSTEM
Show-Section "SAM/SYSTEM locations" { $dirs = @("$env:SYSTEMROOT\repair\SAM", "$env:SYSTEMROOT\System32\config\RegBack\SAM", "$env:SYSTEMROOT\System32\config\SAM", "$env:SYSTEMROOT\repair\system", "$env:SYSTEMROOT\System32\config\SYSTEM", "$env:SYSTEMROOT\System32\config\RegBack\system", "C:\windows.old", "$env:SYSTEMROOT\System32\config\SECURITY", "$env:SYSTEMROOT\System32\config\SOFTWARE"); $dirs | ForEach-Object { if (Test-Path $_) { "Found: $_" } else { "Not Found: $_" } } }

# Group Policy Enumeration
Show-Section "Pull Default Domain Policy" { Get-GPO -Name "Default Domain Policy" }

# Service Enumeration
Show-Section "List all services (wmic)" { wmic service list brief }
Show-Section "List all services (tasklist)" { tasklist /SVC }
Show-Section "Running services (wmic)" { wmic service get name,displayname,pathname,startmode | findstr /i "auto" }
Show-Section "Running Services (PS)" { Get-Service | Where-Object { $_.Status -eq 'Running' } }
Show-Section "Running Processes" { Get-Process | Sort-Object -Property WS -Descending | Select-Object -First 20 }

# Installed Software & Services
Show-Section "32-bit Installed Applications" { Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname }
Show-Section "64-bit Installed Applications" { Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname }
Show-Section "Startup/Autorun Applications" { reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run }

# Environment Variables
Show-Section "Environment Variables" { Get-ChildItem Env: }
Show-Section "Path Variables" { Write-Output $env:PATH }


Write-Host "`nEnumeration complete." -ForegroundColor Green

